# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _radio_astro_swig
else:
    import _radio_astro_swig

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def high_res_timer_now() -> "gr::high_res_timer_type":
    r"""high_res_timer_now() -> gr::high_res_timer_type"""
    return _radio_astro_swig.high_res_timer_now()

def high_res_timer_now_perfmon() -> "gr::high_res_timer_type":
    r"""high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
    return _radio_astro_swig.high_res_timer_now_perfmon()

def high_res_timer_tps() -> "gr::high_res_timer_type":
    r"""high_res_timer_tps() -> gr::high_res_timer_type"""
    return _radio_astro_swig.high_res_timer_tps()

def high_res_timer_epoch() -> "gr::high_res_timer_type":
    r"""high_res_timer_epoch() -> gr::high_res_timer_type"""
    return _radio_astro_swig.high_res_timer_epoch()
class dedispersion(object):
    r"""
    Dedisperse incoming power spectrum.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of radio_astro::dedispersion.

    To avoid accidental use of raw pointers, radio_astro::dedispersion's constructor is in a private implementation class. radio_astro::dedispersion::make is the public interface for creating new instances.

    Args:
        vec_length : 
        dms : 
        f_obs : 
        bw : 
        t_int : 
        nt : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def make(vec_length: "int", dms: "float", f_obs: "float", bw: "float", t_int: "float", nt: "int") -> "gr::radio_astro::dedispersion::sptr":
        r"""
        make(int vec_length, float dms, float f_obs, float bw, float t_int, int nt) -> dedispersion_sptr
        Dedisperse incoming power spectrum.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of radio_astro::dedispersion.

        To avoid accidental use of raw pointers, radio_astro::dedispersion's constructor is in a private implementation class. radio_astro::dedispersion::make is the public interface for creating new instances.

        Args:
            vec_length : 
            dms : 
            f_obs : 
            bw : 
            t_int : 
            nt : 
        """
        return _radio_astro_swig.dedispersion_make(vec_length, dms, f_obs, bw, t_int, nt)
    __swig_destroy__ = _radio_astro_swig.delete_dedispersion

# Register dedispersion in _radio_astro_swig:
_radio_astro_swig.dedispersion_swigregister(dedispersion)

def dedispersion_make(vec_length: "int", dms: "float", f_obs: "float", bw: "float", t_int: "float", nt: "int") -> "gr::radio_astro::dedispersion::sptr":
    r"""
    dedispersion_make(int vec_length, float dms, float f_obs, float bw, float t_int, int nt) -> dedispersion_sptr
    Dedisperse incoming power spectrum.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of radio_astro::dedispersion.

    To avoid accidental use of raw pointers, radio_astro::dedispersion's constructor is in a private implementation class. radio_astro::dedispersion::make is the public interface for creating new instances.

    Args:
        vec_length : 
        dms : 
        f_obs : 
        bw : 
        t_int : 
        nt : 
    """
    return _radio_astro_swig.dedispersion_make(vec_length, dms, f_obs, bw, t_int, nt)

class dedispersion_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::radio_astro::dedispersion > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(dedispersion_sptr self) -> dedispersion_sptr
        __init__(dedispersion_sptr self, dedispersion p) -> dedispersion_sptr
        """
        _radio_astro_swig.dedispersion_sptr_swiginit(self, _radio_astro_swig.new_dedispersion_sptr(*args))

    def __deref__(self) -> "gr::radio_astro::dedispersion *":
        r"""__deref__(dedispersion_sptr self) -> dedispersion"""
        return _radio_astro_swig.dedispersion_sptr___deref__(self)
    __swig_destroy__ = _radio_astro_swig.delete_dedispersion_sptr

    def make(self, vec_length: "int", dms: "float", f_obs: "float", bw: "float", t_int: "float", nt: "int") -> "gr::radio_astro::dedispersion::sptr":
        r"""
        make(dedispersion_sptr self, int vec_length, float dms, float f_obs, float bw, float t_int, int nt) -> dedispersion_sptr
        Dedisperse incoming power spectrum.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of radio_astro::dedispersion.

        To avoid accidental use of raw pointers, radio_astro::dedispersion's constructor is in a private implementation class. radio_astro::dedispersion::make is the public interface for creating new instances.

        Args:
            vec_length : 
            dms : 
            f_obs : 
            bw : 
            t_int : 
            nt : 
        """
        return _radio_astro_swig.dedispersion_sptr_make(self, vec_length, dms, f_obs, bw, t_int, nt)

    def history(self) -> "unsigned int":
        r"""history(dedispersion_sptr self) -> unsigned int"""
        return _radio_astro_swig.dedispersion_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(dedispersion_sptr self, int which, int delay)
        declare_sample_delay(dedispersion_sptr self, unsigned int delay)
        """
        return _radio_astro_swig.dedispersion_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(dedispersion_sptr self, int which) -> unsigned int"""
        return _radio_astro_swig.dedispersion_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(dedispersion_sptr self, int multiple)"""
        return _radio_astro_swig.dedispersion_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(dedispersion_sptr self) -> int"""
        return _radio_astro_swig.dedispersion_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(dedispersion_sptr self) -> double"""
        return _radio_astro_swig.dedispersion_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(dedispersion_sptr self) -> uint64_t"""
        return _radio_astro_swig.dedispersion_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(dedispersion_sptr self) -> uint64_t"""
        return _radio_astro_swig.dedispersion_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(dedispersion_sptr self) -> bool"""
        return _radio_astro_swig.dedispersion_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(dedispersion_sptr self) -> bool"""
        return _radio_astro_swig.dedispersion_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(dedispersion_sptr self, unsigned int which_input) -> uint64_t"""
        return _radio_astro_swig.dedispersion_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(dedispersion_sptr self, unsigned int which_output) -> uint64_t"""
        return _radio_astro_swig.dedispersion_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(dedispersion_sptr self, std::string level)"""
        return _radio_astro_swig.dedispersion_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(dedispersion_sptr self) -> std::string"""
        return _radio_astro_swig.dedispersion_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(dedispersion_sptr self) -> int"""
        return _radio_astro_swig.dedispersion_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(dedispersion_sptr self, int m)"""
        return _radio_astro_swig.dedispersion_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(dedispersion_sptr self)"""
        return _radio_astro_swig.dedispersion_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(dedispersion_sptr self) -> bool"""
        return _radio_astro_swig.dedispersion_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(dedispersion_sptr self, int m)"""
        return _radio_astro_swig.dedispersion_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(dedispersion_sptr self) -> int"""
        return _radio_astro_swig.dedispersion_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(dedispersion_sptr self, int i) -> long"""
        return _radio_astro_swig.dedispersion_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(dedispersion_sptr self, long max_output_buffer)
        set_max_output_buffer(dedispersion_sptr self, int port, long max_output_buffer)
        """
        return _radio_astro_swig.dedispersion_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(dedispersion_sptr self, int i) -> long"""
        return _radio_astro_swig.dedispersion_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(dedispersion_sptr self, long min_output_buffer)
        set_min_output_buffer(dedispersion_sptr self, int port, long min_output_buffer)
        """
        return _radio_astro_swig.dedispersion_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(dedispersion_sptr self) -> float"""
        return _radio_astro_swig.dedispersion_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(dedispersion_sptr self) -> float"""
        return _radio_astro_swig.dedispersion_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(dedispersion_sptr self) -> float"""
        return _radio_astro_swig.dedispersion_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(dedispersion_sptr self) -> float"""
        return _radio_astro_swig.dedispersion_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(dedispersion_sptr self) -> float"""
        return _radio_astro_swig.dedispersion_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(dedispersion_sptr self) -> float"""
        return _radio_astro_swig.dedispersion_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(dedispersion_sptr self, int which) -> float
        pc_input_buffers_full(dedispersion_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.dedispersion_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(dedispersion_sptr self, int which) -> float
        pc_input_buffers_full_avg(dedispersion_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.dedispersion_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(dedispersion_sptr self, int which) -> float
        pc_input_buffers_full_var(dedispersion_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.dedispersion_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(dedispersion_sptr self, int which) -> float
        pc_output_buffers_full(dedispersion_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.dedispersion_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(dedispersion_sptr self, int which) -> float
        pc_output_buffers_full_avg(dedispersion_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.dedispersion_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(dedispersion_sptr self, int which) -> float
        pc_output_buffers_full_var(dedispersion_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.dedispersion_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(dedispersion_sptr self) -> float"""
        return _radio_astro_swig.dedispersion_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(dedispersion_sptr self) -> float"""
        return _radio_astro_swig.dedispersion_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(dedispersion_sptr self) -> float"""
        return _radio_astro_swig.dedispersion_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(dedispersion_sptr self) -> float"""
        return _radio_astro_swig.dedispersion_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(dedispersion_sptr self) -> float"""
        return _radio_astro_swig.dedispersion_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(dedispersion_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _radio_astro_swig.dedispersion_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(dedispersion_sptr self)"""
        return _radio_astro_swig.dedispersion_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(dedispersion_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _radio_astro_swig.dedispersion_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(dedispersion_sptr self) -> int"""
        return _radio_astro_swig.dedispersion_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(dedispersion_sptr self) -> int"""
        return _radio_astro_swig.dedispersion_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(dedispersion_sptr self, int priority) -> int"""
        return _radio_astro_swig.dedispersion_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(dedispersion_sptr self) -> std::string"""
        return _radio_astro_swig.dedispersion_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(dedispersion_sptr self) -> std::string"""
        return _radio_astro_swig.dedispersion_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(dedispersion_sptr self) -> io_signature_sptr"""
        return _radio_astro_swig.dedispersion_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(dedispersion_sptr self) -> io_signature_sptr"""
        return _radio_astro_swig.dedispersion_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(dedispersion_sptr self) -> long"""
        return _radio_astro_swig.dedispersion_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(dedispersion_sptr self) -> basic_block_sptr"""
        return _radio_astro_swig.dedispersion_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(dedispersion_sptr self, int ninputs, int noutputs) -> bool"""
        return _radio_astro_swig.dedispersion_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(dedispersion_sptr self) -> std::string"""
        return _radio_astro_swig.dedispersion_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(dedispersion_sptr self, std::string name)"""
        return _radio_astro_swig.dedispersion_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(dedispersion_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _radio_astro_swig.dedispersion_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(dedispersion_sptr self) -> swig_pmt_ptr"""
        return _radio_astro_swig.dedispersion_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(dedispersion_sptr self) -> swig_pmt_ptr"""
        return _radio_astro_swig.dedispersion_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(dedispersion_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _radio_astro_swig.dedispersion_sptr_message_subscribers(self, which_port)

# Register dedispersion_sptr in _radio_astro_swig:
_radio_astro_swig.dedispersion_sptr_swigregister(dedispersion_sptr)


dedispersion_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
dedispersion = dedispersion.make;

class detect(object):
    r"""
    Event Detection by comparison of signal to RMS Noise level. event detection: fill a circular buffer with complex samples and search for peaks nsigma above the RMS of the data stream input: complex vector of I/Q samples parameters.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of radio_astro::detect.

    To avoid accidental use of raw pointers, radio_astro::detect's constructor is in a private implementation class. radio_astro::detect::make is the public interface for creating new instances.

    Args:
        vec_length : 
        dms : 
        f_obs : 
        bw : 
        t_int : 
        nt : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    @staticmethod
    def make(vec_length: "int", dms: "float", f_obs: "float", bw: "float", t_int: "float", nt: "int") -> "gr::radio_astro::detect::sptr":
        r"""
        make(int vec_length, float dms, float f_obs, float bw, float t_int, int nt) -> detect_sptr
        Event Detection by comparison of signal to RMS Noise level. event detection: fill a circular buffer with complex samples and search for peaks nsigma above the RMS of the data stream input: complex vector of I/Q samples parameters.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of radio_astro::detect.

        To avoid accidental use of raw pointers, radio_astro::detect's constructor is in a private implementation class. radio_astro::detect::make is the public interface for creating new instances.

        Args:
            vec_length : 
            dms : 
            f_obs : 
            bw : 
            t_int : 
            nt : 
        """
        return _radio_astro_swig.detect_make(vec_length, dms, f_obs, bw, t_int, nt)

    def set_dms(self, dms: "float") -> "void":
        r"""set_dms(detect self, float dms)"""
        return _radio_astro_swig.detect_set_dms(self, dms)

    def set_vlen(self, vec_length: "int") -> "void":
        r"""set_vlen(detect self, int vec_length)"""
        return _radio_astro_swig.detect_set_vlen(self, vec_length)

    def set_mode(self, nt: "int") -> "void":
        r"""set_mode(detect self, int nt)"""
        return _radio_astro_swig.detect_set_mode(self, nt)

    def set_bw(self, bw: "float") -> "void":
        r"""set_bw(detect self, float bw)"""
        return _radio_astro_swig.detect_set_bw(self, bw)

    def set_freq(self, f_obs: "float") -> "void":
        r"""set_freq(detect self, float f_obs)"""
        return _radio_astro_swig.detect_set_freq(self, f_obs)
    __swig_destroy__ = _radio_astro_swig.delete_detect

# Register detect in _radio_astro_swig:
_radio_astro_swig.detect_swigregister(detect)

def detect_make(vec_length: "int", dms: "float", f_obs: "float", bw: "float", t_int: "float", nt: "int") -> "gr::radio_astro::detect::sptr":
    r"""
    detect_make(int vec_length, float dms, float f_obs, float bw, float t_int, int nt) -> detect_sptr
    Event Detection by comparison of signal to RMS Noise level. event detection: fill a circular buffer with complex samples and search for peaks nsigma above the RMS of the data stream input: complex vector of I/Q samples parameters.

    Constructor Specific Documentation:

    Return a shared_ptr to a new instance of radio_astro::detect.

    To avoid accidental use of raw pointers, radio_astro::detect's constructor is in a private implementation class. radio_astro::detect::make is the public interface for creating new instances.

    Args:
        vec_length : 
        dms : 
        f_obs : 
        bw : 
        t_int : 
        nt : 
    """
    return _radio_astro_swig.detect_make(vec_length, dms, f_obs, bw, t_int, nt)

class detect_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::radio_astro::detect > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(detect_sptr self) -> detect_sptr
        __init__(detect_sptr self, detect p) -> detect_sptr
        """
        _radio_astro_swig.detect_sptr_swiginit(self, _radio_astro_swig.new_detect_sptr(*args))

    def __deref__(self) -> "gr::radio_astro::detect *":
        r"""__deref__(detect_sptr self) -> detect"""
        return _radio_astro_swig.detect_sptr___deref__(self)
    __swig_destroy__ = _radio_astro_swig.delete_detect_sptr

    def make(self, vec_length: "int", dms: "float", f_obs: "float", bw: "float", t_int: "float", nt: "int") -> "gr::radio_astro::detect::sptr":
        r"""
        make(detect_sptr self, int vec_length, float dms, float f_obs, float bw, float t_int, int nt) -> detect_sptr
        Event Detection by comparison of signal to RMS Noise level. event detection: fill a circular buffer with complex samples and search for peaks nsigma above the RMS of the data stream input: complex vector of I/Q samples parameters.

        Constructor Specific Documentation:

        Return a shared_ptr to a new instance of radio_astro::detect.

        To avoid accidental use of raw pointers, radio_astro::detect's constructor is in a private implementation class. radio_astro::detect::make is the public interface for creating new instances.

        Args:
            vec_length : 
            dms : 
            f_obs : 
            bw : 
            t_int : 
            nt : 
        """
        return _radio_astro_swig.detect_sptr_make(self, vec_length, dms, f_obs, bw, t_int, nt)

    def set_dms(self, dms: "float") -> "void":
        r"""set_dms(detect_sptr self, float dms)"""
        return _radio_astro_swig.detect_sptr_set_dms(self, dms)

    def set_vlen(self, vec_length: "int") -> "void":
        r"""set_vlen(detect_sptr self, int vec_length)"""
        return _radio_astro_swig.detect_sptr_set_vlen(self, vec_length)

    def set_mode(self, nt: "int") -> "void":
        r"""set_mode(detect_sptr self, int nt)"""
        return _radio_astro_swig.detect_sptr_set_mode(self, nt)

    def set_bw(self, bw: "float") -> "void":
        r"""set_bw(detect_sptr self, float bw)"""
        return _radio_astro_swig.detect_sptr_set_bw(self, bw)

    def set_freq(self, f_obs: "float") -> "void":
        r"""set_freq(detect_sptr self, float f_obs)"""
        return _radio_astro_swig.detect_sptr_set_freq(self, f_obs)

    def history(self) -> "unsigned int":
        r"""history(detect_sptr self) -> unsigned int"""
        return _radio_astro_swig.detect_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(detect_sptr self, int which, int delay)
        declare_sample_delay(detect_sptr self, unsigned int delay)
        """
        return _radio_astro_swig.detect_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(detect_sptr self, int which) -> unsigned int"""
        return _radio_astro_swig.detect_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(detect_sptr self, int multiple)"""
        return _radio_astro_swig.detect_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(detect_sptr self) -> int"""
        return _radio_astro_swig.detect_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(detect_sptr self) -> double"""
        return _radio_astro_swig.detect_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(detect_sptr self) -> uint64_t"""
        return _radio_astro_swig.detect_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(detect_sptr self) -> uint64_t"""
        return _radio_astro_swig.detect_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(detect_sptr self) -> bool"""
        return _radio_astro_swig.detect_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(detect_sptr self) -> bool"""
        return _radio_astro_swig.detect_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(detect_sptr self, unsigned int which_input) -> uint64_t"""
        return _radio_astro_swig.detect_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(detect_sptr self, unsigned int which_output) -> uint64_t"""
        return _radio_astro_swig.detect_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(detect_sptr self, std::string level)"""
        return _radio_astro_swig.detect_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(detect_sptr self) -> std::string"""
        return _radio_astro_swig.detect_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(detect_sptr self) -> int"""
        return _radio_astro_swig.detect_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(detect_sptr self, int m)"""
        return _radio_astro_swig.detect_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(detect_sptr self)"""
        return _radio_astro_swig.detect_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(detect_sptr self) -> bool"""
        return _radio_astro_swig.detect_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(detect_sptr self, int m)"""
        return _radio_astro_swig.detect_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(detect_sptr self) -> int"""
        return _radio_astro_swig.detect_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(detect_sptr self, int i) -> long"""
        return _radio_astro_swig.detect_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(detect_sptr self, long max_output_buffer)
        set_max_output_buffer(detect_sptr self, int port, long max_output_buffer)
        """
        return _radio_astro_swig.detect_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(detect_sptr self, int i) -> long"""
        return _radio_astro_swig.detect_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(detect_sptr self, long min_output_buffer)
        set_min_output_buffer(detect_sptr self, int port, long min_output_buffer)
        """
        return _radio_astro_swig.detect_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(detect_sptr self) -> float"""
        return _radio_astro_swig.detect_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(detect_sptr self) -> float"""
        return _radio_astro_swig.detect_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(detect_sptr self) -> float"""
        return _radio_astro_swig.detect_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(detect_sptr self) -> float"""
        return _radio_astro_swig.detect_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(detect_sptr self) -> float"""
        return _radio_astro_swig.detect_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(detect_sptr self) -> float"""
        return _radio_astro_swig.detect_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(detect_sptr self, int which) -> float
        pc_input_buffers_full(detect_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.detect_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(detect_sptr self, int which) -> float
        pc_input_buffers_full_avg(detect_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.detect_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(detect_sptr self, int which) -> float
        pc_input_buffers_full_var(detect_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.detect_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(detect_sptr self, int which) -> float
        pc_output_buffers_full(detect_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.detect_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(detect_sptr self, int which) -> float
        pc_output_buffers_full_avg(detect_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.detect_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(detect_sptr self, int which) -> float
        pc_output_buffers_full_var(detect_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.detect_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(detect_sptr self) -> float"""
        return _radio_astro_swig.detect_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(detect_sptr self) -> float"""
        return _radio_astro_swig.detect_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(detect_sptr self) -> float"""
        return _radio_astro_swig.detect_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(detect_sptr self) -> float"""
        return _radio_astro_swig.detect_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(detect_sptr self) -> float"""
        return _radio_astro_swig.detect_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(detect_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _radio_astro_swig.detect_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(detect_sptr self)"""
        return _radio_astro_swig.detect_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(detect_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _radio_astro_swig.detect_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(detect_sptr self) -> int"""
        return _radio_astro_swig.detect_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(detect_sptr self) -> int"""
        return _radio_astro_swig.detect_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(detect_sptr self, int priority) -> int"""
        return _radio_astro_swig.detect_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(detect_sptr self) -> std::string"""
        return _radio_astro_swig.detect_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(detect_sptr self) -> std::string"""
        return _radio_astro_swig.detect_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(detect_sptr self) -> io_signature_sptr"""
        return _radio_astro_swig.detect_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(detect_sptr self) -> io_signature_sptr"""
        return _radio_astro_swig.detect_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(detect_sptr self) -> long"""
        return _radio_astro_swig.detect_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(detect_sptr self) -> basic_block_sptr"""
        return _radio_astro_swig.detect_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(detect_sptr self, int ninputs, int noutputs) -> bool"""
        return _radio_astro_swig.detect_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(detect_sptr self) -> std::string"""
        return _radio_astro_swig.detect_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(detect_sptr self, std::string name)"""
        return _radio_astro_swig.detect_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(detect_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _radio_astro_swig.detect_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(detect_sptr self) -> swig_pmt_ptr"""
        return _radio_astro_swig.detect_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(detect_sptr self) -> swig_pmt_ptr"""
        return _radio_astro_swig.detect_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(detect_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _radio_astro_swig.detect_sptr_message_subscribers(self, which_port)

# Register detect_sptr in _radio_astro_swig:
_radio_astro_swig.detect_sptr_swigregister(detect_sptr)


detect_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
detect = detect.make;

class vmedian(object):
    r"""
    Vector Median of several vectors. For 3 or 4 vectors the code implements exactly the median of the values for more vectors, the result is the sum of all values minus the miniumum and maximum values input: vector of length vector_lenght parameters.

    Constructor Specific Documentation:



    Args:
        vec_length : 
        n : 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def set_vlen(self, vec_length: "int") -> "void":
        r"""
        set_vlen(vmedian self, int vec_length)
        Return a shared_ptr to a new instance of radio_astro::vmedian.

        To avoid accidental use of raw pointers, radio_astro::vmedian's constructor is in a private implementation class. radio_astro::vmedian::make is the public interface for creating new instances.
        """
        return _radio_astro_swig.vmedian_set_vlen(self, vec_length)

    def set_mode(self, n: "int") -> "void":
        r"""set_mode(vmedian self, int n)"""
        return _radio_astro_swig.vmedian_set_mode(self, n)

    @staticmethod
    def make(vec_length: "int", n: "int") -> "gr::radio_astro::vmedian::sptr":
        r"""
        make(int vec_length, int n) -> vmedian_sptr
        Vector Median of several vectors. For 3 or 4 vectors the code implements exactly the median of the values for more vectors, the result is the sum of all values minus the miniumum and maximum values input: vector of length vector_lenght parameters.

        Constructor Specific Documentation:



        Args:
            vec_length : 
            n : 
        """
        return _radio_astro_swig.vmedian_make(vec_length, n)
    __swig_destroy__ = _radio_astro_swig.delete_vmedian

# Register vmedian in _radio_astro_swig:
_radio_astro_swig.vmedian_swigregister(vmedian)

def vmedian_make(vec_length: "int", n: "int") -> "gr::radio_astro::vmedian::sptr":
    r"""
    vmedian_make(int vec_length, int n) -> vmedian_sptr
    Vector Median of several vectors. For 3 or 4 vectors the code implements exactly the median of the values for more vectors, the result is the sum of all values minus the miniumum and maximum values input: vector of length vector_lenght parameters.

    Constructor Specific Documentation:



    Args:
        vec_length : 
        n : 
    """
    return _radio_astro_swig.vmedian_make(vec_length, n)

class vmedian_sptr(object):
    r"""Proxy of C++ boost::shared_ptr< gr::radio_astro::vmedian > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(vmedian_sptr self) -> vmedian_sptr
        __init__(vmedian_sptr self, vmedian p) -> vmedian_sptr
        """
        _radio_astro_swig.vmedian_sptr_swiginit(self, _radio_astro_swig.new_vmedian_sptr(*args))

    def __deref__(self) -> "gr::radio_astro::vmedian *":
        r"""__deref__(vmedian_sptr self) -> vmedian"""
        return _radio_astro_swig.vmedian_sptr___deref__(self)
    __swig_destroy__ = _radio_astro_swig.delete_vmedian_sptr

    def set_vlen(self, vec_length: "int") -> "void":
        r"""
        set_vlen(vmedian_sptr self, int vec_length)
        Return a shared_ptr to a new instance of radio_astro::vmedian.

        To avoid accidental use of raw pointers, radio_astro::vmedian's constructor is in a private implementation class. radio_astro::vmedian::make is the public interface for creating new instances.
        """
        return _radio_astro_swig.vmedian_sptr_set_vlen(self, vec_length)

    def set_mode(self, n: "int") -> "void":
        r"""set_mode(vmedian_sptr self, int n)"""
        return _radio_astro_swig.vmedian_sptr_set_mode(self, n)

    def make(self, vec_length: "int", n: "int") -> "gr::radio_astro::vmedian::sptr":
        r"""
        make(vmedian_sptr self, int vec_length, int n) -> vmedian_sptr
        Vector Median of several vectors. For 3 or 4 vectors the code implements exactly the median of the values for more vectors, the result is the sum of all values minus the miniumum and maximum values input: vector of length vector_lenght parameters.

        Constructor Specific Documentation:



        Args:
            vec_length : 
            n : 
        """
        return _radio_astro_swig.vmedian_sptr_make(self, vec_length, n)

    def history(self) -> "unsigned int":
        r"""history(vmedian_sptr self) -> unsigned int"""
        return _radio_astro_swig.vmedian_sptr_history(self)

    def declare_sample_delay(self, *args) -> "void":
        r"""
        declare_sample_delay(vmedian_sptr self, int which, int delay)
        declare_sample_delay(vmedian_sptr self, unsigned int delay)
        """
        return _radio_astro_swig.vmedian_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, which: "int") -> "unsigned int":
        r"""sample_delay(vmedian_sptr self, int which) -> unsigned int"""
        return _radio_astro_swig.vmedian_sptr_sample_delay(self, which)

    def set_output_multiple(self, multiple: "int") -> "void":
        r"""set_output_multiple(vmedian_sptr self, int multiple)"""
        return _radio_astro_swig.vmedian_sptr_set_output_multiple(self, multiple)

    def output_multiple(self) -> "int":
        r"""output_multiple(vmedian_sptr self) -> int"""
        return _radio_astro_swig.vmedian_sptr_output_multiple(self)

    def relative_rate(self) -> "double":
        r"""relative_rate(vmedian_sptr self) -> double"""
        return _radio_astro_swig.vmedian_sptr_relative_rate(self)

    def relative_rate_i(self) -> "uint64_t":
        r"""relative_rate_i(vmedian_sptr self) -> uint64_t"""
        return _radio_astro_swig.vmedian_sptr_relative_rate_i(self)

    def relative_rate_d(self) -> "uint64_t":
        r"""relative_rate_d(vmedian_sptr self) -> uint64_t"""
        return _radio_astro_swig.vmedian_sptr_relative_rate_d(self)

    def start(self) -> "bool":
        r"""start(vmedian_sptr self) -> bool"""
        return _radio_astro_swig.vmedian_sptr_start(self)

    def stop(self) -> "bool":
        r"""stop(vmedian_sptr self) -> bool"""
        return _radio_astro_swig.vmedian_sptr_stop(self)

    def nitems_read(self, which_input: "unsigned int") -> "uint64_t":
        r"""nitems_read(vmedian_sptr self, unsigned int which_input) -> uint64_t"""
        return _radio_astro_swig.vmedian_sptr_nitems_read(self, which_input)

    def nitems_written(self, which_output: "unsigned int") -> "uint64_t":
        r"""nitems_written(vmedian_sptr self, unsigned int which_output) -> uint64_t"""
        return _radio_astro_swig.vmedian_sptr_nitems_written(self, which_output)

    def set_log_level(self, level: "std::string") -> "void":
        r"""set_log_level(vmedian_sptr self, std::string level)"""
        return _radio_astro_swig.vmedian_sptr_set_log_level(self, level)

    def log_level(self) -> "std::string":
        r"""log_level(vmedian_sptr self) -> std::string"""
        return _radio_astro_swig.vmedian_sptr_log_level(self)

    def max_noutput_items(self) -> "int":
        r"""max_noutput_items(vmedian_sptr self) -> int"""
        return _radio_astro_swig.vmedian_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, m: "int") -> "void":
        r"""set_max_noutput_items(vmedian_sptr self, int m)"""
        return _radio_astro_swig.vmedian_sptr_set_max_noutput_items(self, m)

    def unset_max_noutput_items(self) -> "void":
        r"""unset_max_noutput_items(vmedian_sptr self)"""
        return _radio_astro_swig.vmedian_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self) -> "bool":
        r"""is_set_max_noutput_items(vmedian_sptr self) -> bool"""
        return _radio_astro_swig.vmedian_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, m: "int") -> "void":
        r"""set_min_noutput_items(vmedian_sptr self, int m)"""
        return _radio_astro_swig.vmedian_sptr_set_min_noutput_items(self, m)

    def min_noutput_items(self) -> "int":
        r"""min_noutput_items(vmedian_sptr self) -> int"""
        return _radio_astro_swig.vmedian_sptr_min_noutput_items(self)

    def max_output_buffer(self, i: "int") -> "long":
        r"""max_output_buffer(vmedian_sptr self, int i) -> long"""
        return _radio_astro_swig.vmedian_sptr_max_output_buffer(self, i)

    def set_max_output_buffer(self, *args) -> "void":
        r"""
        set_max_output_buffer(vmedian_sptr self, long max_output_buffer)
        set_max_output_buffer(vmedian_sptr self, int port, long max_output_buffer)
        """
        return _radio_astro_swig.vmedian_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, i: "int") -> "long":
        r"""min_output_buffer(vmedian_sptr self, int i) -> long"""
        return _radio_astro_swig.vmedian_sptr_min_output_buffer(self, i)

    def set_min_output_buffer(self, *args) -> "void":
        r"""
        set_min_output_buffer(vmedian_sptr self, long min_output_buffer)
        set_min_output_buffer(vmedian_sptr self, int port, long min_output_buffer)
        """
        return _radio_astro_swig.vmedian_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self) -> "float":
        r"""pc_noutput_items(vmedian_sptr self) -> float"""
        return _radio_astro_swig.vmedian_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self) -> "float":
        r"""pc_noutput_items_avg(vmedian_sptr self) -> float"""
        return _radio_astro_swig.vmedian_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self) -> "float":
        r"""pc_noutput_items_var(vmedian_sptr self) -> float"""
        return _radio_astro_swig.vmedian_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self) -> "float":
        r"""pc_nproduced(vmedian_sptr self) -> float"""
        return _radio_astro_swig.vmedian_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self) -> "float":
        r"""pc_nproduced_avg(vmedian_sptr self) -> float"""
        return _radio_astro_swig.vmedian_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self) -> "float":
        r"""pc_nproduced_var(vmedian_sptr self) -> float"""
        return _radio_astro_swig.vmedian_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full(vmedian_sptr self, int which) -> float
        pc_input_buffers_full(vmedian_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.vmedian_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_avg(vmedian_sptr self, int which) -> float
        pc_input_buffers_full_avg(vmedian_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.vmedian_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_input_buffers_full_var(vmedian_sptr self, int which) -> float
        pc_input_buffers_full_var(vmedian_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.vmedian_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full(vmedian_sptr self, int which) -> float
        pc_output_buffers_full(vmedian_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.vmedian_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_avg(vmedian_sptr self, int which) -> float
        pc_output_buffers_full_avg(vmedian_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.vmedian_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args) -> "std::vector< float,std::allocator< float > >":
        r"""
        pc_output_buffers_full_var(vmedian_sptr self, int which) -> float
        pc_output_buffers_full_var(vmedian_sptr self) -> pmt_vector_float
        """
        return _radio_astro_swig.vmedian_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self) -> "float":
        r"""pc_work_time(vmedian_sptr self) -> float"""
        return _radio_astro_swig.vmedian_sptr_pc_work_time(self)

    def pc_work_time_avg(self) -> "float":
        r"""pc_work_time_avg(vmedian_sptr self) -> float"""
        return _radio_astro_swig.vmedian_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self) -> "float":
        r"""pc_work_time_var(vmedian_sptr self) -> float"""
        return _radio_astro_swig.vmedian_sptr_pc_work_time_var(self)

    def pc_work_time_total(self) -> "float":
        r"""pc_work_time_total(vmedian_sptr self) -> float"""
        return _radio_astro_swig.vmedian_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self) -> "float":
        r"""pc_throughput_avg(vmedian_sptr self) -> float"""
        return _radio_astro_swig.vmedian_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, mask: "std::vector< int,std::allocator< int > > const &") -> "void":
        r"""set_processor_affinity(vmedian_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _radio_astro_swig.vmedian_sptr_set_processor_affinity(self, mask)

    def unset_processor_affinity(self) -> "void":
        r"""unset_processor_affinity(vmedian_sptr self)"""
        return _radio_astro_swig.vmedian_sptr_unset_processor_affinity(self)

    def processor_affinity(self) -> "std::vector< int,std::allocator< int > >":
        r"""processor_affinity(vmedian_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _radio_astro_swig.vmedian_sptr_processor_affinity(self)

    def active_thread_priority(self) -> "int":
        r"""active_thread_priority(vmedian_sptr self) -> int"""
        return _radio_astro_swig.vmedian_sptr_active_thread_priority(self)

    def thread_priority(self) -> "int":
        r"""thread_priority(vmedian_sptr self) -> int"""
        return _radio_astro_swig.vmedian_sptr_thread_priority(self)

    def set_thread_priority(self, priority: "int") -> "int":
        r"""set_thread_priority(vmedian_sptr self, int priority) -> int"""
        return _radio_astro_swig.vmedian_sptr_set_thread_priority(self, priority)

    def name(self) -> "std::string":
        r"""name(vmedian_sptr self) -> std::string"""
        return _radio_astro_swig.vmedian_sptr_name(self)

    def symbol_name(self) -> "std::string":
        r"""symbol_name(vmedian_sptr self) -> std::string"""
        return _radio_astro_swig.vmedian_sptr_symbol_name(self)

    def input_signature(self) -> "gr::io_signature::sptr":
        r"""input_signature(vmedian_sptr self) -> io_signature_sptr"""
        return _radio_astro_swig.vmedian_sptr_input_signature(self)

    def output_signature(self) -> "gr::io_signature::sptr":
        r"""output_signature(vmedian_sptr self) -> io_signature_sptr"""
        return _radio_astro_swig.vmedian_sptr_output_signature(self)

    def unique_id(self) -> "long":
        r"""unique_id(vmedian_sptr self) -> long"""
        return _radio_astro_swig.vmedian_sptr_unique_id(self)

    def to_basic_block(self) -> "gr::basic_block_sptr":
        r"""to_basic_block(vmedian_sptr self) -> basic_block_sptr"""
        return _radio_astro_swig.vmedian_sptr_to_basic_block(self)

    def check_topology(self, ninputs: "int", noutputs: "int") -> "bool":
        r"""check_topology(vmedian_sptr self, int ninputs, int noutputs) -> bool"""
        return _radio_astro_swig.vmedian_sptr_check_topology(self, ninputs, noutputs)

    def alias(self) -> "std::string":
        r"""alias(vmedian_sptr self) -> std::string"""
        return _radio_astro_swig.vmedian_sptr_alias(self)

    def set_block_alias(self, name: "std::string") -> "void":
        r"""set_block_alias(vmedian_sptr self, std::string name)"""
        return _radio_astro_swig.vmedian_sptr_set_block_alias(self, name)

    def _post(self, which_port: "swig_pmt_ptr", msg: "swig_pmt_ptr") -> "void":
        r"""_post(vmedian_sptr self, swig_pmt_ptr which_port, swig_pmt_ptr msg)"""
        return _radio_astro_swig.vmedian_sptr__post(self, which_port, msg)

    def message_ports_in(self) -> "pmt::pmt_t":
        r"""message_ports_in(vmedian_sptr self) -> swig_pmt_ptr"""
        return _radio_astro_swig.vmedian_sptr_message_ports_in(self)

    def message_ports_out(self) -> "pmt::pmt_t":
        r"""message_ports_out(vmedian_sptr self) -> swig_pmt_ptr"""
        return _radio_astro_swig.vmedian_sptr_message_ports_out(self)

    def message_subscribers(self, which_port: "swig_pmt_ptr") -> "pmt::pmt_t":
        r"""message_subscribers(vmedian_sptr self, swig_pmt_ptr which_port) -> swig_pmt_ptr"""
        return _radio_astro_swig.vmedian_sptr_message_subscribers(self, which_port)

# Register vmedian_sptr in _radio_astro_swig:
_radio_astro_swig.vmedian_sptr_swigregister(vmedian_sptr)


vmedian_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
vmedian = vmedian.make;



